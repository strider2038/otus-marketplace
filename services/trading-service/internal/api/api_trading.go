/*
 * Public API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package api

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gofrs/uuid"
	"github.com/gorilla/mux"
)

// A TradingApiController binds http requests to an api service and writes the service results to the http response
type TradingApiController struct {
	service TradingApiServicer
}

// NewTradingApiController creates a default api controller
func NewTradingApiController(s TradingApiServicer) Router {
	return &TradingApiController{service: s}
}

// Routes returns all of the api route for the TradingApiController
func (c *TradingApiController) Routes() Routes {
	return Routes{
		{
			"CancelPurchaseOrder",
			strings.ToUpper("Post"),
			"/api/v1/purchase-orders/{purchaseOrderId}/cancel",
			c.CancelPurchaseOrder,
		},
		{
			"CancelSellOrder",
			strings.ToUpper("Post"),
			"/api/v1/sell-orders/{sellOrderId}/cancel",
			c.CancelSellOrder,
		},
		{
			"CreatePurchaseOrder",
			strings.ToUpper("Post"),
			"/api/v1/purchase-orders",
			c.CreatePurchaseOrder,
		},
		{
			"CreateSellOrder",
			strings.ToUpper("Post"),
			"/api/v1/sell-orders",
			c.CreateSellOrder,
		},
		{
			"CreateTradingItem",
			strings.ToUpper("Post"),
			"/api/v1/items",
			c.CreateTradingItem,
		},
		{
			"GetPurchaseOrders",
			strings.ToUpper("Get"),
			"/api/v1/purchase-orders",
			c.GetPurchaseOrders,
		},
		{
			"GetSellOrders",
			strings.ToUpper("Get"),
			"/api/v1/sell-orders",
			c.GetSellOrders,
		},
		{
			"GetTradingItems",
			strings.ToUpper("Get"),
			"/api/v1/items",
			c.GetTradingItems,
		},
		{
			"GetUserItems",
			strings.ToUpper("Get"),
			"/api/v1/user-items",
			c.GetUserItems,
		},
	}
}

// CancelPurchaseOrder -
func (c *TradingApiController) CancelPurchaseOrder(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	orderID := uuid.FromStringOrNil(params["purchaseOrderId"])
	userID := uuid.FromStringOrNil(r.Header.Get("X-User-Id"))

	result, err := c.service.CancelPurchaseOrder(r.Context(), userID, orderID)
	// If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// CancelSellOrder -
func (c *TradingApiController) CancelSellOrder(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	orderID := uuid.FromStringOrNil(params["sellOrderId"])
	userID := uuid.FromStringOrNil(r.Header.Get("X-User-Id"))

	result, err := c.service.CancelSellOrder(r.Context(), userID, orderID)
	// If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// CreatePurchaseOrder -
func (c *TradingApiController) CreatePurchaseOrder(w http.ResponseWriter, r *http.Request) {
	purchaseOrder := &PurchaseOrder{}
	if err := json.NewDecoder(r.Body).Decode(&purchaseOrder); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	purchaseOrder.UserID = uuid.FromStringOrNil(r.Header.Get("X-User-Id"))
	purchaseOrder.IdempotenceKey = r.Header.Get("If-Match")

	result, err := c.service.CreatePurchaseOrder(r.Context(), *purchaseOrder)
	// If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// CreateSellOrder -
func (c *TradingApiController) CreateSellOrder(w http.ResponseWriter, r *http.Request) {
	sellOrder := &SellOrder{}
	if err := json.NewDecoder(r.Body).Decode(&sellOrder); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}

	sellOrder.UserID = uuid.FromStringOrNil(r.Header.Get("X-User-Id"))
	sellOrder.IdempotenceKey = r.Header.Get("If-Match")

	result, err := c.service.CreateSellOrder(r.Context(), *sellOrder)
	// If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// CreateTradingItem -
func (c *TradingApiController) CreateTradingItem(w http.ResponseWriter, r *http.Request) {
	tradingItem := &TradingItem{}
	if err := json.NewDecoder(r.Body).Decode(&tradingItem); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	tradingItem.UserID = uuid.FromStringOrNil(r.Header.Get("X-User-Id"))
	tradingItem.UserRole = r.Header.Get("X-User-Role")

	result, err := c.service.CreateTradingItem(r.Context(), *tradingItem)
	// If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetPurchaseOrders -
func (c *TradingApiController) GetPurchaseOrders(w http.ResponseWriter, r *http.Request) {
	userID := uuid.FromStringOrNil(r.Header.Get("X-User-Id"))

	result, eTag, err := c.service.GetPurchaseOrders(r.Context(), userID)
	// If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	w.Header().Set("ETag", eTag)
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetSellOrders -
func (c *TradingApiController) GetSellOrders(w http.ResponseWriter, r *http.Request) {
	userID := uuid.FromStringOrNil(r.Header.Get("X-User-Id"))

	result, eTag, err := c.service.GetSellOrders(r.Context(), userID)
	// If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	w.Header().Set("ETag", eTag)
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetTradingItems -
func (c *TradingApiController) GetTradingItems(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetTradingItems(r.Context())
	// If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

func (c *TradingApiController) GetUserItems(w http.ResponseWriter, r *http.Request) {
	userID := uuid.FromStringOrNil(r.Header.Get("X-User-Id"))

	result, err := c.service.GetUserItems(r.Context(), userID)
	// If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
