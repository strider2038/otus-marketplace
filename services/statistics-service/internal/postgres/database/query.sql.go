// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package database

import (
	"context"
	"time"

	"github.com/gofrs/uuid"
)

const addDailyDeals = `-- name: AddDailyDeals :exec
INSERT INTO "daily_deals" AS d ("date", item_id, item_name, count, amount)
VALUES ($1, $2, $3, $4, $5)
ON CONFLICT ("date")
DO UPDATE SET count = d.count + EXCLUDED.count, amount = d.amount + EXCLUDED.amount
`

type AddDailyDealsParams struct {
	Date     time.Time
	ItemID   uuid.UUID
	ItemName string
	Count    int64
	Amount   float64
}

func (q *Queries) AddDailyDeals(ctx context.Context, arg AddDailyDealsParams) error {
	_, err := q.db.Exec(ctx, addDailyDeals,
		arg.Date,
		arg.ItemID,
		arg.ItemName,
		arg.Count,
		arg.Amount,
	)
	return err
}

const addTop10Deals = `-- name: AddTop10Deals :exec
INSERT INTO "top10_deals" AS d (item_id, item_name, count, amount)
VALUES ($1, $2, $3, $4)
ON CONFLICT (item_id)
DO UPDATE SET count = d.count + EXCLUDED.count, amount = d.amount + EXCLUDED.amount
`

type AddTop10DealsParams struct {
	ItemID   uuid.UUID
	ItemName string
	Count    int64
	Amount   float64
}

func (q *Queries) AddTop10Deals(ctx context.Context, arg AddTop10DealsParams) error {
	_, err := q.db.Exec(ctx, addTop10Deals,
		arg.ItemID,
		arg.ItemName,
		arg.Count,
		arg.Amount,
	)
	return err
}

const addTotalDailyDeals = `-- name: AddTotalDailyDeals :exec
INSERT INTO "total_daily_deals" AS d ("date", count, amount)
VALUES ($1, $2, $3)
ON CONFLICT ("date")
DO UPDATE SET count = d.count + EXCLUDED.count, amount = d.amount + EXCLUDED.amount
`

type AddTotalDailyDealsParams struct {
	Date   time.Time
	Count  int64
	Amount float64
}

func (q *Queries) AddTotalDailyDeals(ctx context.Context, arg AddTotalDailyDealsParams) error {
	_, err := q.db.Exec(ctx, addTotalDailyDeals, arg.Date, arg.Count, arg.Amount)
	return err
}

const findDailyDeals = `-- name: FindDailyDeals :many
SELECT "date", item_id, item_name, count, amount
FROM "daily_deals"
WHERE "date" >= now() - interval '1 week'
ORDER BY "date", item_name DESC
`

func (q *Queries) FindDailyDeals(ctx context.Context) ([]DailyDeal, error) {
	rows, err := q.db.Query(ctx, findDailyDeals)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DailyDeal
	for rows.Next() {
		var i DailyDeal
		if err := rows.Scan(
			&i.Date,
			&i.ItemID,
			&i.ItemName,
			&i.Count,
			&i.Amount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findTop10Deals = `-- name: FindTop10Deals :many
SELECT item_id, item_name, count, amount
FROM "top10_deals"
ORDER BY amount DESC
LIMIT 10
`

func (q *Queries) FindTop10Deals(ctx context.Context) ([]Top10Deal, error) {
	rows, err := q.db.Query(ctx, findTop10Deals)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Top10Deal
	for rows.Next() {
		var i Top10Deal
		if err := rows.Scan(
			&i.ItemID,
			&i.ItemName,
			&i.Count,
			&i.Amount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findTotalDailyDeals = `-- name: FindTotalDailyDeals :many
SELECT "date", count, amount
FROM "total_daily_deals"
WHERE "date" >= now() - interval '1 week'
ORDER BY "date" DESC
`

func (q *Queries) FindTotalDailyDeals(ctx context.Context) ([]TotalDailyDeal, error) {
	rows, err := q.db.Query(ctx, findTotalDailyDeals)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TotalDailyDeal
	for rows.Next() {
		var i TotalDailyDeal
		if err := rows.Scan(&i.Date, &i.Count, &i.Amount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
