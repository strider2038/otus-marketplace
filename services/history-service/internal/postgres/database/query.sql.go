// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package database

import (
	"context"
	"time"

	"github.com/gofrs/uuid"
)

const addDeal = `-- name: AddDeal :exec
INSERT INTO "deal" (id, user_id, item_id, item_name, "type", amount, commission, completed_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
`

type AddDealParams struct {
	ID          uuid.UUID
	UserID      uuid.UUID
	ItemID      uuid.UUID
	ItemName    string
	Type        DealType
	Amount      float64
	Commission  float64
	CompletedAt time.Time
}

func (q *Queries) AddDeal(ctx context.Context, arg AddDealParams) error {
	_, err := q.db.Exec(ctx, addDeal,
		arg.ID,
		arg.UserID,
		arg.ItemID,
		arg.ItemName,
		arg.Type,
		arg.Amount,
		arg.Commission,
		arg.CompletedAt,
	)
	return err
}

const findDealsByUser = `-- name: FindDealsByUser :many
SELECT id, user_id, item_id, item_name, "type", amount, commission, completed_at
FROM "deal"
WHERE user_id = $1
ORDER BY completed_at DESC
`

func (q *Queries) FindDealsByUser(ctx context.Context, userID uuid.UUID) ([]Deal, error) {
	rows, err := q.db.Query(ctx, findDealsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Deal
	for rows.Next() {
		var i Deal
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ItemID,
			&i.ItemName,
			&i.Type,
			&i.Amount,
			&i.Commission,
			&i.CompletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
