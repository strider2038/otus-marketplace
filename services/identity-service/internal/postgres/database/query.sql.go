// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package database

import (
	"context"

	"github.com/gofrs/uuid"
)

const countUsersByEmail = `-- name: CountUsersByEmail :one
SELECT count(id)
FROM "user"
WHERE email = $1
`

func (q *Queries) CountUsersByEmail(ctx context.Context, email string) (int64, error) {
	row := q.db.QueryRow(ctx, countUsersByEmail, email)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO "user" (id, email, password, first_name, last_name, phone)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, email, password, first_name, last_name, phone, created_at, updated_at
`

type CreateUserParams struct {
	ID        uuid.UUID
	Email     string
	Password  string
	FirstName string
	LastName  string
	Phone     string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.Password,
		arg.FirstName,
		arg.LastName,
		arg.Phone,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.FirstName,
		&i.LastName,
		&i.Phone,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE
FROM "user"
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const findUser = `-- name: FindUser :one
SELECT id, email, password, first_name, last_name, phone, created_at, updated_at
FROM "user"
WHERE id = $1
LIMIT 1
`

func (q *Queries) FindUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, findUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.FirstName,
		&i.LastName,
		&i.Phone,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findUserByEmail = `-- name: FindUserByEmail :one
SELECT id, email, password, first_name, last_name, phone, created_at, updated_at
FROM "user"
WHERE email = $1
LIMIT 1
`

func (q *Queries) FindUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, findUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.FirstName,
		&i.LastName,
		&i.Phone,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE "user"
SET email = $2, first_name = $3, last_name = $4, phone = $5, updated_at = now()
WHERE id = $1
RETURNING id, email, password, first_name, last_name, phone, created_at, updated_at
`

type UpdateUserParams struct {
	ID        uuid.UUID
	Email     string
	FirstName string
	LastName  string
	Phone     string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Email,
		arg.FirstName,
		arg.LastName,
		arg.Phone,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.FirstName,
		&i.LastName,
		&i.Phone,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
