/*
 * Identity Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package api

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gofrs/uuid"
)

// A IdentityApiController binds http requests to an api service and writes the service results to the http response
type IdentityApiController struct {
	service IdentityApiServicer
}

// NewIdentityApiController creates a default api controller
func NewIdentityApiController(service IdentityApiServicer) Router {
	return &IdentityApiController{service: service}
}

// Routes returns all of the api route for the IdentityApiController
func (c *IdentityApiController) Routes() Routes {
	return Routes{
		{
			"GetCurrentUser",
			strings.ToUpper("Get"),
			"/api/v1/profile",
			c.GetCurrentUser,
		},
		{
			"LoginUser",
			strings.ToUpper("Post"),
			"/api/v1/login",
			c.LoginUser,
		},
		{
			"LogoutUser",
			strings.ToUpper("Post"),
			"/api/v1/logout",
			c.LogoutUser,
		},
		{
			"RegisterUser",
			strings.ToUpper("Post"),
			"/api/v1/register",
			c.RegisterUser,
		},
		{
			"UpdateCurrentUser",
			strings.ToUpper("Put"),
			"/api/v1/profile",
			c.UpdateCurrentUser,
		},
	}
}

// GetCurrentUser -
func (c *IdentityApiController) GetCurrentUser(w http.ResponseWriter, r *http.Request) {
	id := uuid.FromStringOrNil(r.Header.Get("X-User-Id"))

	result, err := c.service.GetCurrentUser(r.Context(), id)
	// If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// LoginUser - LoginForm to the system
func (c *IdentityApiController) LoginUser(w http.ResponseWriter, r *http.Request) {
	login := &LoginForm{}
	if err := json.NewDecoder(r.Body).Decode(&login); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}

	result, err := c.service.LoginUser(r.Context(), *login)
	// If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// LogoutUser - Logout from the system
func (c *IdentityApiController) LogoutUser(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.LogoutUser(r.Context())
	// If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RegisterUser - RegistrationForm a user
func (c *IdentityApiController) RegisterUser(w http.ResponseWriter, r *http.Request) {
	register := &RegistrationForm{}
	if err := json.NewDecoder(r.Body).Decode(&register); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}

	result, err := c.service.RegisterUser(r.Context(), *register)
	// If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateCurrentUser -
func (c *IdentityApiController) UpdateCurrentUser(w http.ResponseWriter, r *http.Request) {
	user := &UpdateForm{}
	if err := json.NewDecoder(r.Body).Decode(&user); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}

	id := uuid.FromStringOrNil(r.Header.Get("X-User-Id"))

	result, err := c.service.UpdateCurrentUser(r.Context(), id, *user)
	// If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
