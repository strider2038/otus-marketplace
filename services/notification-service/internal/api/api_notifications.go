/*
 * Services API (hybrid variant)
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package api

import (
	"net/http"
	"strings"

	"github.com/gofrs/uuid"
)

// A NotificationsApiController binds http requests to an api service and writes the service results to the http response
type NotificationsApiController struct {
	service NotificationsApiServicer
}

// NewNotificationsApiController creates a default api controller
func NewNotificationsApiController(s NotificationsApiServicer) Router {
	return &NotificationsApiController{service: s}
}

// Routes returns all of the api route for the NotificationsApiController
func (c *NotificationsApiController) Routes() Routes {
	return Routes{
		{
			"GetNotifications",
			strings.ToUpper("Get"),
			"/api/v1/notifications",
			c.GetNotifications,
		},
	}
}

// GetNotifications -
func (c *NotificationsApiController) GetNotifications(w http.ResponseWriter, r *http.Request) {
	userID := uuid.FromStringOrNil(r.Header.Get("X-User-Id"))

	result, err := c.service.GetNotifications(r.Context(), userID)
	// If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
