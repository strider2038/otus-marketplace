// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package database

import (
	"context"

	"github.com/gofrs/uuid"
)

const createNotification = `-- name: CreateNotification :one
INSERT INTO "notification" (id, user_id, message)
VALUES ($1, $2, $3)
RETURNING id, user_id, message, created_at
`

type CreateNotificationParams struct {
	ID      uuid.UUID
	UserID  uuid.UUID
	Message string
}

func (q *Queries) CreateNotification(ctx context.Context, arg CreateNotificationParams) (Notification, error) {
	row := q.db.QueryRow(ctx, createNotification, arg.ID, arg.UserID, arg.Message)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Message,
		&i.CreatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO "user" (id, email, first_name, last_name, phone)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, email, first_name, last_name, phone, created_at, updated_at
`

type CreateUserParams struct {
	ID        uuid.UUID
	Email     string
	FirstName string
	LastName  string
	Phone     string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.FirstName,
		arg.LastName,
		arg.Phone,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.Phone,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findNotificationsByUser = `-- name: FindNotificationsByUser :many
SELECT id, user_id, message, created_at
FROM "notification"
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) FindNotificationsByUser(ctx context.Context, userID uuid.UUID) ([]Notification, error) {
	rows, err := q.db.Query(ctx, findNotificationsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Notification
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Message,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findUser = `-- name: FindUser :one
SELECT id, email, first_name, last_name, phone, created_at, updated_at
FROM "user"
WHERE id = $1
LIMIT 1
`

func (q *Queries) FindUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, findUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.Phone,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE "user"
SET email = $2, first_name = $3, last_name = $4, phone = $5, updated_at = now()
WHERE id = $1
RETURNING id, email, first_name, last_name, phone, created_at, updated_at
`

type UpdateUserParams struct {
	ID        uuid.UUID
	Email     string
	FirstName string
	LastName  string
	Phone     string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Email,
		arg.FirstName,
		arg.LastName,
		arg.Phone,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.Phone,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
