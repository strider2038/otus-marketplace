// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package database

import (
	"context"

	"github.com/gofrs/uuid"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO "account" (id)
VALUES ($1)
RETURNING id, amount, created_at, updated_at
`

func (q *Queries) CreateAccount(ctx context.Context, id uuid.UUID) (Account, error) {
	row := q.db.QueryRow(ctx, createAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createOperation = `-- name: CreateOperation :one
INSERT INTO "operation" (id, account_id, amount, "type", description)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, account_id, "type", amount, description, created_at
`

type CreateOperationParams struct {
	ID          uuid.UUID
	AccountID   uuid.UUID
	Amount      float64
	Type        OperationType
	Description string
}

func (q *Queries) CreateOperation(ctx context.Context, arg CreateOperationParams) (Operation, error) {
	row := q.db.QueryRow(ctx, createOperation,
		arg.ID,
		arg.AccountID,
		arg.Amount,
		arg.Type,
		arg.Description,
	)
	var i Operation
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Type,
		&i.Amount,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const findAccount = `-- name: FindAccount :one
SELECT id, amount, created_at, updated_at
FROM "account"
WHERE id = $1
LIMIT 1
`

func (q *Queries) FindAccount(ctx context.Context, id uuid.UUID) (Account, error) {
	row := q.db.QueryRow(ctx, findAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findAccountForUpdate = `-- name: FindAccountForUpdate :one
SELECT id, amount, created_at, updated_at
FROM "account"
WHERE id = $1
LIMIT 1
FOR UPDATE
`

func (q *Queries) FindAccountForUpdate(ctx context.Context, id uuid.UUID) (Account, error) {
	row := q.db.QueryRow(ctx, findAccountForUpdate, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findOperationsByAccount = `-- name: FindOperationsByAccount :many
SELECT id, account_id, "type", amount, description, created_at
FROM "operation"
WHERE account_id = $1
ORDER BY created_at DESC
`

func (q *Queries) FindOperationsByAccount(ctx context.Context, accountID uuid.UUID) ([]Operation, error) {
	rows, err := q.db.Query(ctx, findOperationsByAccount, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Operation
	for rows.Next() {
		var i Operation
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Type,
			&i.Amount,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccount = `-- name: UpdateAccount :one
UPDATE "account"
SET amount = $2, updated_at = now()
WHERE id = $1
RETURNING id, amount, created_at, updated_at
`

type UpdateAccountParams struct {
	ID     uuid.UUID
	Amount float64
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (Account, error) {
	row := q.db.QueryRow(ctx, updateAccount, arg.ID, arg.Amount)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
