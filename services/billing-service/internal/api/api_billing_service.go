/*
 * Billing service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package api

import (
	"context"
	"net/http"

	"billing-service/internal/billing"

	"github.com/gofrs/uuid"
	"github.com/muonsoft/validation"
	"github.com/pkg/errors"
	"github.com/strider2038/pkg/persistence"
)

// BillingApiService is a service that implents the logic for the BillingApiServicer
// This service should implement the business logic for every endpoint for the BillingApi API.
// Include any external packages or services that will be required by this service.
type BillingApiService struct {
	accounts           billing.AccountRepository
	operations         billing.OperationRepository
	transactionManager persistence.TransactionManager
	validator          *validation.Validator
}

// NewBillingApiService creates a default api service
func NewBillingApiService(
	accounts billing.AccountRepository,
	operations billing.OperationRepository,
	transactionManager persistence.TransactionManager,
	validator *validation.Validator,
) BillingApiServicer {
	return &BillingApiService{
		accounts:           accounts,
		operations:         operations,
		transactionManager: transactionManager,
		validator:          validator,
	}
}

// GetBillingAccount -
func (s *BillingApiService) GetBillingAccount(ctx context.Context, id uuid.UUID) (ImplResponse, error) {
	account, err := s.accounts.FindByID(ctx, id)
	if err != nil {
		return Response(http.StatusInternalServerError, nil), err
	}

	return Response(http.StatusOK, account), nil
}

// DepositMoney -
func (s *BillingApiService) DepositMoney(ctx context.Context, operation BillingOperation) (ImplResponse, error) {
	if operation.AccountID.IsNil() {
		return newUnauthorizedResponse(), nil
	}

	err := s.validator.ValidateValidatable(ctx, operation)
	if err != nil {
		return newUnprocessableEntityResponse(err.Error()), nil
	}

	err = s.transactionManager.DoTransactionally(ctx, func(ctx context.Context) error {
		account, err := s.accounts.FindByIDForUpdate(ctx, operation.AccountID)
		if err != nil {
			return errors.WithMessagef(err, "failed to find account %s", operation.AccountID)
		}

		account.Amount += operation.Amount

		err = s.operations.Add(ctx, billing.NewDeposit(
			operation.AccountID,
			operation.Amount,
			"money deposit by user",
		))
		if err != nil {
			return errors.WithMessagef(err, "failed to add account %s operation", operation.AccountID)
		}

		err = s.accounts.Save(ctx, account)
		if err != nil {
			return errors.WithMessagef(err, "failed to save account %s", operation.AccountID)
		}

		return nil
	})
	if err != nil {
		return Response(http.StatusInternalServerError, nil), err
	}

	return Response(http.StatusNoContent, nil), nil
}

// WithdrawMoney -
func (s *BillingApiService) WithdrawMoney(ctx context.Context, operation BillingOperation) (ImplResponse, error) {
	if operation.AccountID.IsNil() {
		return newUnauthorizedResponse(), nil
	}

	err := s.validator.ValidateValidatable(ctx, operation)
	if err != nil {
		return newUnprocessableEntityResponse(err.Error()), nil
	}

	err = s.transactionManager.DoTransactionally(ctx, func(ctx context.Context) error {
		account, err := s.accounts.FindByIDForUpdate(ctx, operation.AccountID)
		if err != nil {
			return errors.WithMessagef(err, "failed to find account %s", operation.AccountID)
		}

		account.Amount -= operation.Amount
		if account.Amount < 0 {
			return billing.ErrNotEnoughMoney
		}

		err = s.operations.Add(ctx, billing.NewWithdrawal(
			operation.AccountID,
			operation.Amount,
			"money withdrawal by user",
		))
		if err != nil {
			return errors.WithMessagef(err, "failed to add account %s operation", operation.AccountID)
		}

		err = s.accounts.Save(ctx, account)
		if err != nil {
			return errors.WithMessagef(err, "failed to save account %s", operation.AccountID)
		}

		return nil
	})
	if errors.Is(err, billing.ErrNotEnoughMoney) {
		return Response(http.StatusUnprocessableEntity, Error{
			Code:    http.StatusUnprocessableEntity,
			Message: "Not enough money on the account",
		}), nil
	}
	if err != nil {
		return Response(http.StatusInternalServerError, nil), err
	}

	return Response(http.StatusNoContent, nil), nil
}

// GetBillingOperations -
func (s *BillingApiService) GetBillingOperations(ctx context.Context, accountID uuid.UUID) (ImplResponse, error) {
	if accountID.IsNil() {
		return newUnauthorizedResponse(), nil
	}

	operations, err := s.operations.FindByAccount(ctx, accountID)
	if err != nil {
		return Response(http.StatusInternalServerError, nil), err
	}

	return Response(http.StatusOK, operations), nil
}
